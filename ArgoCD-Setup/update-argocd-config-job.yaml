apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-4"
  name: argocd-add-operator-health-checks-job
spec:
  template:
    spec:
      containers:
        - image: registry.redhat.io/openshift4/ose-cli
          command:
            - /bin/bash
            - -c
            - |
              #!/usr/bin/env bash
              oc patch ArgoCD openshift-gitops -n openshift-gitops --type=merge --patch='{"spec":{"resourceHealthChecks":[{"check":"hs = {}\nhs.status = \"Progressing\"\nhs.message = \"\"\nif obj.status ~= nil then\n  if obj.status.health ~= nil then\n    if obj.status.sync.status == \"Synced\" then\n      hs.status = obj.status.health.status\n      if obj.status.health.message ~= nil then\n        hs.message = obj.status.health.message\n      end\n    end\n  end\nend\nreturn hs\n","group":"argoproj.io","kind":"Application"},{"check":"health_status = {}\nif obj.status ~= nil then\n  if obj.status.conditions ~= nil then\n    numDegraded = 0\n    numPending = 0\n    msg = \"\"\n    for i, condition in pairs(obj.status.conditions) do\n      msg = msg .. i .. \": \" .. condition.type .. \" | \" .. condition.status .. \"\\n\"\n      if condition.type == \"InstallPlanPending\" and condition.status == \"True\" then\n        numPending = numPending + 1\n      elseif (condition.type == \"InstallPlanMissing\" and condition.reason ~= \"ReferencedInstallPlanNotFound\") then\n        numDegraded = numDegraded + 1\n      elseif (condition.type == \"CatalogSourcesUnhealthy\" or condition.type == \"InstallPlanFailed\" or condition.type == \"ResolutionFailed\") and condition.status == \"True\" then\n        numDegraded = numDegraded + 1\n      end\n    end\n  end\n  if numDegraded == 0 and numPending == 0 then\n    health_status.status = \"Healthy\"\n    health_status.message = msg\n    return health_status\n  elseif numPending > 0 and numDegraded == 0 and obj.spec.installPlanApproval == \"Manual\" then\n    health_status.status = \"Healthy\"\n    health_status.message = \"An install plan for a subscription is pending installation but install plan approval is set to manual so considering this as healthy: \" .. msg\n    return health_status\n  elseif numPending > 0 and numDegraded == 0 then\n    health_status.status = \"Progressing\"\n    health_status.message = \"An install plan for a subscription is pending installation\"\n    return health_status\n  else\n    health_status.status = \"Degraded\"\n    health_status.message = msg\n    return health_status\n  end\nend\nreturn health_status\n","group":"operators.coreos.com","kind":"Subscription"},{"check":"hs = {}\nif obj.status ~= nil then\n  if obj.status.phase ~= nil then\n    if obj.status.phase == \"Complete\" then\n      hs.status = \"Healthy\"\n      hs.message = obj.status.phase\n      return hs\n    end\n  end\nend\nhs.status = \"Progressing\"\nhs.message = \"Waiting for InstallPlan to complete\"\nreturn hs\n","group":"operators.coreos.com","kind":"InstallPlan"},{"check":"hs = {}; if obj.status ~= nil then local replicas = obj.status.replicas or 0; local readyReplicas = obj.status.readyReplicas or 0; local availableReplicas = obj.status.availableReplicas or 0; local desiredReplicas = obj.spec.replicas or 0; if availableReplicas == desiredReplicas and readyReplicas == desiredReplicas then hs.status = \"Healthy\"; hs.message = \"All replicas are available and ready\"; elseif replicas < desiredReplicas then hs.status = \"Progressing\"; hs.message = \"Waiting for replicas to be provisioned\"; else hs.status = \"Degraded\"; hs.message = \"Some replicas are not ready or available\"; end else hs.status = \"Unknown\"; hs.message = \"Missing status information\"; end; return hs;","group":"machine.openshift.io","kind":"MachineSet"}]}}'
              exit $?
          imagePullPolicy: Always
          name: argocd-add-operator-health-checks-job
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccountName: argocd-setup-sa
      terminationGracePeriodSeconds: 30
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-4"
  name: argocd-update-label-job
spec:
  template:
    spec:
      containers:
        - image: registry.redhat.io/openshift4/ose-cli
          command:
            - /bin/bash
            - -c
            - |
              #!/usr/bin/env bash
              oc patch ArgoCD openshift-gitops -n openshift-gitops --type=merge --patch='{"spec":{"extraConfig":{"application.instanceLabelKey":"argocd.argoproj.io/instance"}}}'
              exit $?
          imagePullPolicy: Always
          name: argocd-update-label-job
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccountName: argocd-setup-sa
      terminationGracePeriodSeconds: 30
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-4"
  name: argocd-update-sync-delay-job
spec:
  template:
    spec:
      containers:
        - image: registry.redhat.io/openshift4/ose-cli
          command:
            - /bin/bash
            - -c
            - |
              #!/usr/bin/env bash
              oc patch ArgoCD openshift-gitops -n openshift-gitops --type=merge --patch='{"spec":{"controller":{"env":[{"name": "ARGOCD_SYNC_WAVE_DELAY","value": "15"}]}}}'
              exit $?
          imagePullPolicy: Always
          name: argocd-update-sync-delay-job
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccountName: argocd-setup-sa
      terminationGracePeriodSeconds: 30